package loganalyser;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Analyses logs generated by benchbuild -d flag.
 *
 * @author Stefan Huber
 */
public class LogAnalyser {

    private static final String[] EXPRESSIONS_TO_SUM_OVER = {"Instrumented SCoPs: ", "Not instrumented SCoPs: ",
        "Instrumented parents: ", "Not instrumented parents: "};

    /**
     * Returns the first number found.
     *
     * @param split
     * @return
     */
    private static String trimm(String split) {
        boolean foundBeginning = false;
        StringBuilder foundNumber = new StringBuilder();
        for (char c : split.toCharArray()) {
            if (foundBeginning) {
                if (Character.isDigit(c)) {
                    foundNumber.append(c);
                } else {
                    break;
                }
            } else {
                if (Character.isDigit(c)) {
                    foundBeginning = true;
                    foundNumber.append(c);
                }
            }
        }

        return foundNumber.toString();
    }

    /**
     * The main method.
     *
     * @param args the command line arguments. args[0]=&lt;path to folder of logs&gt;
     * @throws java.io.IOException
     */
    public static void main(String[] args) throws IOException {
        if (args.length < 1) {
            throw new IllegalArgumentException("Path to log files missing.");
        }
        File tempFile = File.createTempFile("LogAnalyser", ".tmp");
        tempFile.deleteOnExit();
        try (FileWriter fw = new FileWriter(tempFile)) {
            fw.write(Files.list(Paths.get(args[0]).toAbsolutePath())
                    .filter(Files::isRegularFile)
                    .map(path -> {
                        try {
                            List<String> lines = Files.readAllLines(path);
                            StringBuilder statisticsOfFile = new StringBuilder();
                            for (String expression : EXPRESSIONS_TO_SUM_OVER) {
                                int count = lines.stream()
                                        .filter(l -> l.contains(expression))
                                        .reduce(0, (sum, line) -> {
                                            String[] splits = line.split(":");
                                            try {
                                                return sum + Integer.parseInt(trimm(splits[splits.length - 1]));
                                            } catch (NumberFormatException ex) {
                                                Logger.getLogger(LogAnalyser.class.getName())
                                                        .log(Level.WARNING, "Could not format: {}", line);
                                                return 0;
                                            }
                                        }, (sumA, sumB) -> sumA + sumB);
                                statisticsOfFile.append(path)
                                        .append(": ")
                                        .append(expression)
                                        .append(count)
                                        .append('\n');
                            }
                            return statisticsOfFile;
                        } catch (IOException ex) {
                            Logger.getLogger(LogAnalyser.class.getName()).log(Level.SEVERE, null, ex);
                            return null;
                        }
                    })
                    .reduce(new StringBuilder(), StringBuilder::append)
                    .toString());
        }

        try {
            Process process = new ProcessBuilder("column", "-t", "-s", ":", tempFile.getAbsolutePath()).start();
            process.waitFor();

            int b = 0;
            do {
                System.out.print((char) b);
                b = process.getInputStream().read();
            } while (b > -1);
        } catch (InterruptedException ex) {
            Logger.getLogger(LogAnalyser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
